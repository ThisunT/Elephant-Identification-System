{"version":3,"sources":["../src/controllers/controller-interface.ts"],"names":[],"mappings":"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","file":"controller-interface.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nimport { ErrorFactory } from '@firebase/util';\nimport Errors from '../models/errors';\nimport TokenDetailsModel from '../models/token-details-model';\nimport VapidDetailsModel from '../models/vapid-details-model';\nimport NOTIFICATION_PERMISSION from '../models/notification-permission';\nimport IIDModel from '../models/iid-model';\nimport arrayBufferToBase64 from '../helpers/array-buffer-to-base64';\n\nconst SENDER_ID_OPTION_NAME = 'messagingSenderId';\n// Database cache should be invalidated once a week.\nexport const TOKEN_EXPIRATION_MILLIS = 7 * 24 * 60 * 60 * 1000; // 7 days\n\nexport default class ControllerInterface {\n  public app;\n  public INTERNAL;\n  protected errorFactory_;\n  private messagingSenderId_: string;\n  private tokenDetailsModel_: TokenDetailsModel;\n  private vapidDetailsModel_: VapidDetailsModel;\n  private iidModel_: IIDModel;\n\n  /**\n   * An interface of the Messaging Service API\n   * @param {!firebase.app.App} app\n   */\n  constructor(app) {\n    this.errorFactory_ = new ErrorFactory('messaging', 'Messaging', Errors.map);\n\n    if (\n      !app.options[SENDER_ID_OPTION_NAME] ||\n      typeof app.options[SENDER_ID_OPTION_NAME] !== 'string'\n    ) {\n      throw this.errorFactory_.create(Errors.codes.BAD_SENDER_ID);\n    }\n\n    this.messagingSenderId_ = app.options[SENDER_ID_OPTION_NAME];\n\n    this.tokenDetailsModel_ = new TokenDetailsModel();\n    this.vapidDetailsModel_ = new VapidDetailsModel();\n    this.iidModel_ = new IIDModel();\n\n    this.app = app;\n    this.INTERNAL = {};\n    this.INTERNAL.delete = () => this.delete();\n  }\n\n  /**\n   * @export\n   */\n  async getToken(): Promise<string | null> {\n    // Check with permissions\n    const currentPermission = this.getNotificationPermission_();\n    if (currentPermission !== NOTIFICATION_PERMISSION.granted) {\n      if (currentPermission === NOTIFICATION_PERMISSION.denied) {\n        return Promise.reject(\n          this.errorFactory_.create(Errors.codes.NOTIFICATIONS_BLOCKED)\n        );\n      }\n\n      // We must wait for permission to be granted\n      return Promise.resolve(null);\n    }\n\n    const swReg = await this.getSWRegistration_();\n    const publicVapidKey = await this.getPublicVapidKey_();\n    const pushSubscription = await this.getPushSubscription(\n      swReg,\n      publicVapidKey\n    );\n    const tokenDetails = await this.tokenDetailsModel_.getTokenDetailsFromSWScope(\n      swReg.scope\n    );\n\n    if (tokenDetails) {\n      return this.manageExistingToken(\n        swReg,\n        pushSubscription,\n        publicVapidKey,\n        tokenDetails\n      );\n    }\n    return this.getNewToken(swReg, pushSubscription, publicVapidKey);\n  }\n\n  /**\n   * manageExistingToken is triggered if there's an existing FCM token in the\n   * database and it can take 3 different actions:\n   * 1) Retrieve the existing FCM token from the database.\n   * 2) If VAPID details have changed: Delete the existing token and create a\n   * new one with the new VAPID key.\n   * 3) If the database cache is invalidated: Send a request to FCM to update\n   * the token, and to check if the token is still valid on FCM-side.\n   */\n  private async manageExistingToken(\n    swReg: ServiceWorkerRegistration,\n    pushSubscription: PushSubscription,\n    publicVapidKey: Uint8Array,\n    tokenDetails: Object\n  ): Promise<string> {\n    const isTokenValid = this.isTokenStillValid(\n      pushSubscription,\n      publicVapidKey,\n      tokenDetails\n    );\n    if (isTokenValid) {\n      const now = Date.now();\n      if (now < tokenDetails['createTime'] + TOKEN_EXPIRATION_MILLIS) {\n        return tokenDetails['fcmToken'];\n      } else {\n        return this.updateToken(\n          swReg,\n          pushSubscription,\n          publicVapidKey,\n          tokenDetails\n        );\n      }\n    }\n\n    // If the token is no longer valid (for example if the VAPID details\n    // have changed), delete the existing token, and create a new one.\n    await this.deleteToken(tokenDetails['fcmToken']);\n    return this.getNewToken(swReg, pushSubscription, publicVapidKey);\n  }\n\n  /*\n   * Checks if the tokenDetails match the details provided in the clients.\n   */\n  private isTokenStillValid(\n    pushSubscription: PushSubscription,\n    publicVapidKey: Uint8Array,\n    tokenDetails: Object\n  ): Boolean {\n    if (arrayBufferToBase64(publicVapidKey) !== tokenDetails['vapidKey']) {\n      return false;\n    }\n\n    // getKey() isn't defined in the PushSubscription externs file, hence\n    // subscription['getKey']('<key name>').\n    return (\n      pushSubscription.endpoint === tokenDetails['endpoint'] &&\n      arrayBufferToBase64(pushSubscription['getKey']('auth')) ===\n        tokenDetails['auth'] &&\n      arrayBufferToBase64(pushSubscription['getKey']('p256dh')) ===\n        tokenDetails['p256dh']\n    );\n  }\n\n  private async updateToken(\n    swReg: ServiceWorkerRegistration,\n    pushSubscription: PushSubscription,\n    publicVapidKey: Uint8Array,\n    tokenDetails: Object\n  ): Promise<string> {\n    try {\n      const updatedToken = await this.iidModel_.updateToken(\n        this.messagingSenderId_,\n        tokenDetails['fcmToken'],\n        tokenDetails['fcmPushSet'],\n        pushSubscription,\n        publicVapidKey\n      );\n\n      const allDetails = {\n        swScope: swReg.scope,\n        vapidKey: publicVapidKey,\n        subscription: pushSubscription,\n        fcmSenderId: this.messagingSenderId_,\n        fcmToken: updatedToken,\n        fcmPushSet: tokenDetails['fcmPushSet']\n      };\n\n      await this.tokenDetailsModel_.saveTokenDetails(allDetails);\n      await this.vapidDetailsModel_.saveVapidDetails(\n        swReg.scope,\n        publicVapidKey\n      );\n      return updatedToken;\n    } catch (e) {\n      await this.deleteToken(tokenDetails['fcmToken']);\n      throw e;\n    }\n  }\n\n  private async getNewToken(\n    swReg: ServiceWorkerRegistration,\n    pushSubscription: PushSubscription,\n    publicVapidKey: Uint8Array\n  ): Promise<string> {\n    const tokenDetails = await this.iidModel_.getToken(\n      this.messagingSenderId_,\n      pushSubscription,\n      publicVapidKey\n    );\n    const allDetails = {\n      swScope: swReg.scope,\n      vapidKey: publicVapidKey,\n      subscription: pushSubscription,\n      fcmSenderId: this.messagingSenderId_,\n      fcmToken: tokenDetails['token'],\n      fcmPushSet: tokenDetails['pushSet']\n    };\n    await this.tokenDetailsModel_.saveTokenDetails(allDetails);\n    await this.vapidDetailsModel_.saveVapidDetails(swReg.scope, publicVapidKey);\n    return tokenDetails['token'];\n  }\n\n  /**\n   * This method deletes tokens that the token manager looks after,\n   * unsubscribes the token from FCM  and then unregisters the push\n   * subscription if it exists. It returns a promise that indicates\n   * whether or not the unsubscribe request was processed successfully.\n   * @export\n   */\n  deleteToken(token: string): Promise<Boolean> {\n    return this.tokenDetailsModel_\n      .deleteToken(token)\n      .then(details => {\n        return this.iidModel_.deleteToken(\n          details['fcmSenderId'],\n          details['fcmToken'],\n          details['fcmPushSet']\n        );\n      })\n      .then(() => {\n        return this.getSWRegistration_()\n          .then(registration => {\n            if (registration) {\n              return registration.pushManager.getSubscription();\n            }\n          })\n          .then(subscription => {\n            if (subscription) {\n              return subscription.unsubscribe();\n            }\n          });\n      });\n  }\n\n  getSWRegistration_(): Promise<ServiceWorkerRegistration> {\n    throw this.errorFactory_.create(Errors.codes.SHOULD_BE_INHERITED);\n  }\n\n  getPublicVapidKey_(): Promise<Uint8Array> {\n    throw this.errorFactory_.create(Errors.codes.SHOULD_BE_INHERITED);\n  }\n\n  //\n  // The following methods should only be available in the window.\n  //\n\n  requestPermission() {\n    throw this.errorFactory_.create(Errors.codes.AVAILABLE_IN_WINDOW);\n  }\n\n  /**\n   * Gets a PushSubscription for the current user.\n   */\n  getPushSubscription(\n    swRegistration: ServiceWorkerRegistration,\n    publicVapidKey: Uint8Array\n  ): Promise<PushSubscription> {\n    return swRegistration.pushManager.getSubscription().then(subscription => {\n      if (subscription) {\n        return subscription;\n      }\n\n      return swRegistration.pushManager.subscribe({\n        userVisibleOnly: true,\n        applicationServerKey: publicVapidKey\n      });\n    });\n  }\n\n  /**\n   * @export\n   * @param {!ServiceWorkerRegistration} registration\n   */\n  useServiceWorker(registration) {\n    throw this.errorFactory_.create(Errors.codes.AVAILABLE_IN_WINDOW);\n  }\n\n  /**\n   * @export\n   * @param {!string} b64PublicKey\n   */\n  usePublicVapidKey(b64PublicKey) {\n    throw this.errorFactory_.create(Errors.codes.AVAILABLE_IN_WINDOW);\n  }\n\n  /**\n   * @export\n   * @param {!firebase.Observer|function(*)} nextOrObserver\n   * @param {function(!Error)=} optError\n   * @param {function()=} optCompleted\n   * @return {!function()}\n   */\n  onMessage(nextOrObserver, optError, optCompleted) {\n    throw this.errorFactory_.create(Errors.codes.AVAILABLE_IN_WINDOW);\n  }\n\n  /**\n   * @export\n   * @param {!firebase.Observer|function()} nextOrObserver An observer object\n   * or a function triggered on token refresh.\n   * @param {function(!Error)=} optError Optional A function\n   * triggered on token refresh error.\n   * @param {function()=} optCompleted Optional function triggered when the\n   * observer is removed.\n   * @return {!function()} The unsubscribe function for the observer.\n   */\n  onTokenRefresh(nextOrObserver, optError, optCompleted) {\n    throw this.errorFactory_.create(Errors.codes.AVAILABLE_IN_WINDOW);\n  }\n\n  //\n  // The following methods are used by the service worker only.\n  //\n\n  /**\n   * @export\n   * @param {function(Object)} callback\n   */\n  setBackgroundMessageHandler(callback) {\n    throw this.errorFactory_.create(Errors.codes.AVAILABLE_IN_SW);\n  }\n\n  //\n  // The following methods are used by the service themselves and not exposed\n  // publicly or not expected to be used by developers.\n  //\n\n  /**\n   * This method is required to adhere to the Firebase interface.\n   * It closes any currently open indexdb database connections.\n   */\n  delete() {\n    return Promise.all([\n      this.tokenDetailsModel_.closeDatabase(),\n      this.vapidDetailsModel_.closeDatabase()\n    ]);\n  }\n\n  /**\n   * Returns the current Notification Permission state.\n   * @private\n   * @return {string} The currenct permission state.\n   */\n  getNotificationPermission_() {\n    return (Notification as any).permission;\n  }\n\n  getTokenDetailsModel(): TokenDetailsModel {\n    return this.tokenDetailsModel_;\n  }\n\n  getVapidDetailsModel(): VapidDetailsModel {\n    return this.vapidDetailsModel_;\n  }\n\n  /**\n   * @protected\n   * @returns {IIDModel}\n   */\n  getIIDModel() {\n    return this.iidModel_;\n  }\n}\n"]}