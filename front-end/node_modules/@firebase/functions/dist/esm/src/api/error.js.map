{"version":3,"sources":["../src/api/error.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;AAKH;;;;;;GAMG;AACH,IAAM,YAAY,GAA2C;IAC3D,EAAE,EAAE,IAAI;IACR,SAAS,EAAE,WAAW;IACtB,OAAO,EAAE,SAAS;IAClB,gBAAgB,EAAE,kBAAkB;IACpC,iBAAiB,EAAE,mBAAmB;IACtC,SAAS,EAAE,WAAW;IACtB,cAAc,EAAE,gBAAgB;IAChC,iBAAiB,EAAE,mBAAmB;IACtC,eAAe,EAAE,iBAAiB;IAClC,kBAAkB,EAAE,oBAAoB;IACxC,mBAAmB,EAAE,qBAAqB;IAC1C,OAAO,EAAE,SAAS;IAClB,YAAY,EAAE,cAAc;IAC5B,aAAa,EAAE,eAAe;IAC9B,QAAQ,EAAE,UAAU;IACpB,WAAW,EAAE,aAAa;IAC1B,SAAS,EAAE,WAAW;CACvB,CAAC;AAEF;;;GAGG;AACH;IAAoC,0CAAK;IAYvC,wBAAY,IAAwB,EAAE,OAAgB,EAAE,OAAa;QAArE,YACE,kBAAM,OAAO,CAAC,SASf;QAPC,qEAAqE;QACrE,2BAA2B;QAC3B,+IAA+I;QAC/I,MAAM,CAAC,cAAc,CAAC,KAAI,EAAE,cAAc,CAAC,SAAS,CAAC,CAAC;QAEtD,KAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,KAAI,CAAC,OAAO,GAAG,OAAO,CAAC;;IACzB,CAAC;IACH,qBAAC;AAAD,CAvBA,AAuBC,CAvBmC,KAAK,GAuBxC;;AAED;;;;;;;GAOG;AACH,2BAA2B,MAAc;IACvC,yCAAyC;IACzC,EAAE,CAAC,CAAC,MAAM,IAAI,GAAG,IAAI,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC;QAClC,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IACD,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QACf,KAAK,CAAC;YACJ,6CAA6C;YAC7C,MAAM,CAAC,UAAU,CAAC;QACpB,KAAK,GAAG;YACN,MAAM,CAAC,kBAAkB,CAAC;QAC5B,KAAK,GAAG;YACN,MAAM,CAAC,iBAAiB,CAAC;QAC3B,KAAK,GAAG;YACN,MAAM,CAAC,mBAAmB,CAAC;QAC7B,KAAK,GAAG;YACN,MAAM,CAAC,WAAW,CAAC;QACrB,KAAK,GAAG;YACN,MAAM,CAAC,SAAS,CAAC;QACnB,KAAK,GAAG;YACN,MAAM,CAAC,oBAAoB,CAAC;QAC9B,KAAK,GAAG;YACN,MAAM,CAAC,WAAW,CAAC;QACrB,KAAK,GAAG;YACN,MAAM,CAAC,UAAU,CAAC;QACpB,KAAK,GAAG;YACN,MAAM,CAAC,eAAe,CAAC;QACzB,KAAK,GAAG;YACN,MAAM,CAAC,aAAa,CAAC;QACvB,KAAK,GAAG;YACN,MAAM,CAAC,mBAAmB,CAAC;IAC/B,CAAC;IACD,MAAM,CAAC,SAAS,CAAC;AACnB,CAAC;AAED;;GAEG;AACH,MAAM,4BACJ,MAAc,EACd,QAAa,EACb,UAAsB;IAEtB,IAAI,IAAI,GAAG,iBAAiB,CAAC,MAAM,CAAC,CAAC;IAErC,uDAAuD;IACvD,IAAI,WAAW,GAAW,IAAI,CAAC;IAE/B,IAAI,OAAO,GAAQ,SAAS,CAAC;IAE7B,mDAAmD;IACnD,IAAI,CAAC;QACH,IAAM,SAAS,GAAG,QAAQ,CAAC,KAAK,CAAC;QACjC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YACd,IAAM,QAAM,GAAG,SAAS,CAAC,MAAM,CAAC;YAChC,EAAE,CAAC,CAAC,OAAO,QAAM,KAAK,QAAQ,CAAC,CAAC,CAAC;gBAC/B,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,QAAM,CAAC,CAAC,CAAC,CAAC;oBAC1B,2DAA2D;oBAC3D,MAAM,CAAC,IAAI,cAAc,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;gBACpD,CAAC;gBACD,IAAI,GAAG,YAAY,CAAC,QAAM,CAAC,CAAC;YAC9B,CAAC;YACD,gEAAgE;YAChE,gEAAgE;YAChE,WAAW,GAAG,QAAM,CAAC;YAErB,IAAM,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC;YAClC,EAAE,CAAC,CAAC,OAAO,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC;gBAChC,WAAW,GAAG,OAAO,CAAC;YACxB,CAAC;YAED,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC;YAC5B,EAAE,CAAC,CAAC,OAAO,KAAK,SAAS,CAAC,CAAC,CAAC;gBAC1B,OAAO,GAAG,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YACvC,CAAC;QACH,CAAC;IACH,CAAC;IAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACX,yDAAyD;IAC3D,CAAC;IAED,EAAE,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC;QAClB,uEAAuE;QACvE,wEAAwE;QACxE,oBAAoB;QACpB,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED,MAAM,CAAC,IAAI,cAAc,CAAC,IAAI,EAAE,WAAW,EAAE,OAAO,CAAC,CAAC;AACxD,CAAC","file":"error.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HttpsError, FunctionsErrorCode } from '@firebase/functions-types';\nimport { Serializer } from '../serializer';\n\n/**\n * Standard error codes for different ways a request can fail, as defined by:\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n *\n * This map is used primarily to convert from a backend error code string to\n * a client SDK error code string, and make sure it's in the supported set.\n */\nconst errorCodeMap: { [name: string]: FunctionsErrorCode } = {\n  OK: 'ok',\n  CANCELLED: 'cancelled',\n  UNKNOWN: 'unknown',\n  INVALID_ARGUMENT: 'invalid-argument',\n  DEADLINE_EXCEEDED: 'deadline-exceeded',\n  NOT_FOUND: 'not-found',\n  ALREADY_EXISTS: 'already-exists',\n  PERMISSION_DENIED: 'permission-denied',\n  UNAUTHENTICATED: 'unauthenticated',\n  RESOURCE_EXHAUSTED: 'resource-exhausted',\n  FAILED_PRECONDITION: 'failed-precondition',\n  ABORTED: 'aborted',\n  OUT_OF_RANGE: 'out-of-range',\n  UNIMPLEMENTED: 'unimplemented',\n  INTERNAL: 'internal',\n  UNAVAILABLE: 'unavailable',\n  DATA_LOSS: 'data-loss'\n};\n\n/**\n * An explicit error that can be thrown from a handler to send an error to the\n * client that called the function.\n */\nexport class HttpsErrorImpl extends Error implements HttpsError {\n  /**\n   * A standard error code that will be returned to the client. This also\n   * determines the HTTP status code of the response, as defined in code.proto.\n   */\n  readonly code: FunctionsErrorCode;\n\n  /**\n   * Extra data to be converted to JSON and included in the error response.\n   */\n  readonly details?: any;\n\n  constructor(code: FunctionsErrorCode, message?: string, details?: any) {\n    super(message);\n\n    // This is a workaround for a bug in TypeScript when extending Error:\n    // tslint:disable-next-line\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, HttpsErrorImpl.prototype);\n\n    this.code = code;\n    this.details = details;\n  }\n}\n\n/**\n * Takes an HTTP status code and returns the corresponding ErrorCode.\n * This is the standard HTTP status code -> error mapping defined in:\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n *\n * @param status An HTTP status code.\n * @return The corresponding ErrorCode, or ErrorCode.UNKNOWN if none.\n */\nfunction codeForHTTPStatus(status: number): FunctionsErrorCode {\n  // Make sure any successful status is OK.\n  if (status >= 200 && status < 300) {\n    return 'ok';\n  }\n  switch (status) {\n    case 0:\n      // This can happen if the server returns 500.\n      return 'internal';\n    case 400:\n      return 'invalid-argument';\n    case 401:\n      return 'unauthenticated';\n    case 403:\n      return 'permission-denied';\n    case 404:\n      return 'not-found';\n    case 409:\n      return 'aborted';\n    case 429:\n      return 'resource-exhausted';\n    case 499:\n      return 'cancelled';\n    case 500:\n      return 'internal';\n    case 501:\n      return 'unimplemented';\n    case 503:\n      return 'unavailable';\n    case 504:\n      return 'deadline-exceeded';\n  }\n  return 'unknown';\n}\n\n/**\n * Takes an HTTP response and returns the corresponding Error, if any.\n */\nexport function _errorForResponse(\n  status: number,\n  bodyJSON: any,\n  serializer: Serializer\n): Error | null {\n  let code = codeForHTTPStatus(status);\n\n  // Start with reasonable defaults from the status code.\n  let description: string = code;\n\n  let details: any = undefined;\n\n  // Then look through the body for explicit details.\n  try {\n    const errorJSON = bodyJSON.error;\n    if (errorJSON) {\n      const status = errorJSON.status;\n      if (typeof status === 'string') {\n        if (!errorCodeMap[status]) {\n          // They must've included an unknown error code in the body.\n          return new HttpsErrorImpl('internal', 'internal');\n        }\n        code = errorCodeMap[status];\n      }\n      // TODO(klimt): Add better default descriptions for error enums.\n      // The default description needs to be updated for the new code.\n      description = status;\n\n      const message = errorJSON.message;\n      if (typeof message === 'string') {\n        description = message;\n      }\n\n      details = errorJSON.details;\n      if (details !== undefined) {\n        details = serializer.decode(details);\n      }\n    }\n  } catch (e) {\n    // If we couldn't parse explicit error data, that's fine.\n  }\n\n  if (code === 'ok') {\n    // Technically, there's an edge case where a developer could explicitly\n    // return an error code of OK, and we will treat it as success, but that\n    // seems reasonable.\n    return null;\n  }\n\n  return new HttpsErrorImpl(code, description, details);\n}\n"]}