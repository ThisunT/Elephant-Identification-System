{"version":3,"sources":["../src/api/service.ts"],"names":[],"mappings":"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","file":"service.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport firebase from '@firebase/app';\nimport {\n  FirebaseFunctions,\n  FunctionsErrorCode,\n  HttpsCallable,\n  HttpsCallableResult\n} from '@firebase/functions-types';\nimport { _errorForResponse, HttpsErrorImpl } from './error';\nimport { ContextProvider } from '../context';\nimport { Serializer } from '../serializer';\n\n/**\n * The response to an http request.\n */\ninterface HttpResponse {\n  status: number;\n  json: any;\n}\n\n/**\n * The main class for the Firebase Functions SDK.\n */\nexport class Service implements FirebaseFunctions {\n  private readonly contextProvider: ContextProvider;\n  private readonly serializer = new Serializer();\n\n  /**\n   * Creates a new Functions service for the given app and (optional) region.\n   * @param app_ The FirebaseApp to use.\n   * @param region_ The region to call functions in.\n   */\n  constructor(\n    private app_: FirebaseApp,\n    private region_: string = 'us-central1'\n  ) {\n    this.contextProvider = new ContextProvider(app_);\n  }\n\n  get app(): FirebaseApp {\n    return this.app_;\n  }\n\n  /**\n   * Returns the URL for a callable with the given name.\n   * @param name The name of the callable.\n   */\n  _url(name: string): string {\n    const projectId = this.app_.options.projectId;\n    const region = this.region_;\n    return `https://${region}-${projectId}.cloudfunctions.net/${name}`;\n  }\n\n  /**\n   * Returns a reference to the callable https trigger with the given name.\n   * @param name The name of the trigger.\n   */\n  httpsCallable(name: string): HttpsCallable {\n    let callable = <HttpsCallable>(data?: any) => {\n      return this.call(name, data);\n    };\n    return callable;\n  }\n\n  /**\n   * Does an HTTP POST and returns the completed response.\n   * @param url The url to post to.\n   * @param body The JSON body of the post.\n   * @param headers The HTTP headers to include in the request.\n   * @return A Promise that will succeed when the request finishes.\n   */\n  private async postJSON(\n    url: string,\n    body: {},\n    headers: Headers\n  ): Promise<HttpResponse> {\n    headers.append('Content-Type', 'application/json');\n\n    let response: Response;\n    try {\n      response = await fetch(url, {\n        method: 'POST',\n        body: JSON.stringify(body),\n        headers\n      });\n    } catch (e) {\n      // This could be an unhandled error on the backend, or it could be a\n      // network error. There's no way to no, since an unhandled error on the\n      // backend will fail to set the proper CORS header, and thus will be\n      // treated as a network error by fetch.\n      return {\n        status: 0,\n        json: null\n      };\n    }\n    let json: any = null;\n    try {\n      json = await response.json();\n    } catch (e) {\n      // If we fail to parse JSON, it will fail the same as an empty body.\n    }\n    return {\n      status: response.status,\n      json: json\n    };\n  }\n\n  /**\n   * Calls a callable function asynchronously and returns the result.\n   * @param name The name of the callable trigger.\n   * @param data The data to pass as params to the function.s\n   */\n  private async call(name: string, data: any): Promise<HttpsCallableResult> {\n    const url = this._url(name);\n\n    // Encode any special types, such as dates, in the input data.\n    data = this.serializer.encode(data);\n    const body = { data };\n\n    // Add a header for the authToken.\n    const headers = new Headers();\n    const context = await this.contextProvider.getContext();\n    if (context.authToken) {\n      headers.append('Authorization', 'Bearer ' + context.authToken);\n    }\n    if (context.instanceIdToken) {\n      headers.append('Firebase-Instance-ID-Token', context.instanceIdToken);\n    }\n\n    const response = await this.postJSON(url, body, headers);\n\n    // Check for an error status, regardless of http status.\n    const error = _errorForResponse(\n      response.status,\n      response.json,\n      this.serializer\n    );\n    if (error) {\n      throw error;\n    }\n\n    if (!response.json) {\n      throw new HttpsErrorImpl(\n        'internal',\n        'Response is not valid JSON object.'\n      );\n    }\n\n    let responseData = response.json.data;\n    // TODO(klimt): For right now, allow \"result\" instead of \"data\", for\n    // backwards compatibility.\n    if (typeof responseData === 'undefined') {\n      responseData = response.json.result;\n    }\n    if (typeof responseData === 'undefined') {\n      // Consider the response malformed.\n      throw new HttpsErrorImpl('internal', 'Response is missing data field.');\n    }\n\n    // Decode any special types, such as dates, in the returned data.\n    const decodedData = this.serializer.decode(responseData);\n\n    return { data: decodedData };\n  }\n}\n"]}