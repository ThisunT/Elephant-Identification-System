{"version":3,"sources":["../src/context.ts"],"names":[],"mappings":";;;AA4BA;;GAEG;AACH;IACE,yBAA6B,GAAgB;QAAhB,QAAG,GAAH,GAAG,CAAa;IAAG,CAAC;IAE3C,sCAAY,GAAlB;;;;;;;wBAEkB,qBAAO,IAAI,CAAC,GAAoB,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAAA;;wBAA5D,KAAK,GAAG,SAAoD;wBAClE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACX,MAAM,gBAAC,SAAS,EAAC;wBACnB,CAAC;wBACD,sBAAO,KAAK,CAAC,WAAW,EAAC;;;wBAEzB,wEAAwE;wBACxE,sBAAO,SAAS,EAAC;;;;;KAEpB;IAEK,4CAAkB,GAAxB;;;;;;;wBAEI,yEAAyE;wBACzE,kDAAkD;wBAClD,EAAE,CAAC,CAAC,CAAE,IAAI,CAAC,GAAW,CAAC,SAAS,CAAC,CAAC,CAAC;4BACjC,MAAM,gBAAC,SAAS,EAAC;wBACnB,CAAC;wBACK,SAAS,GAAI,IAAI,CAAC,GAAW,CAAC,SAAS,EAAuB,CAAC;wBACvD,qBAAM,SAAS,CAAC,QAAQ,EAAE,EAAA;;wBAAlC,KAAK,GAAG,SAA0B;wBACxC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACX,MAAM,gBAAC,SAAS,EAAC;wBACnB,CAAC;wBACD,sBAAO,KAAK,EAAC;;;wBAEb,0EAA0E;wBAC1E,4DAA4D;wBAE5D,mEAAmE;wBACnE,sBAAO,SAAS,EAAC;;;;;KAEpB;IAEY,oCAAU,GAAvB;;;;;4BACoB,qBAAM,IAAI,CAAC,YAAY,EAAE,EAAA;;wBAArC,SAAS,GAAG,SAAyB;wBACnB,qBAAM,IAAI,CAAC,kBAAkB,EAAE,EAAA;;wBAAjD,eAAe,GAAG,SAA+B;wBACvD,sBAAO,EAAE,SAAS,WAAA,EAAE,eAAe,iBAAA,EAAE,EAAC;;;;KACvC;IACH,sBAAC;AAAD,CA3CA,AA2CC,IAAA;AA3CY,0CAAe","file":"context.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { FirebaseApp } from '@firebase/app-types';\nimport { _FirebaseApp } from '@firebase/app-types/private';\nimport { firebase } from '@firebase/app';\nimport { FirebaseMessaging } from '@firebase/messaging-types';\n\n/**\n * The metadata that should be supplied with function calls.\n */\nexport interface Context {\n  authToken?: string;\n  instanceIdToken?: string;\n}\n\n/**\n * Helper class to get metadata that should be included with a function call.\n */\nexport class ContextProvider {\n  constructor(private readonly app: FirebaseApp) {}\n\n  async getAuthToken(): Promise<string | undefined> {\n    try {\n      const token = await (this.app as _FirebaseApp).INTERNAL.getToken();\n      if (!token) {\n        return undefined;\n      }\n      return token.accessToken;\n    } catch (e) {\n      // If there's any error when trying to get the auth token, leave it off.\n      return undefined;\n    }\n  }\n\n  async getInstanceIdToken(): Promise<string | undefined> {\n    try {\n      // HACK: Until we have a separate instanceId package, this is a quick way\n      // to load in the messaging instance for this app.\n      if (!(this.app as any).messaging) {\n        return undefined;\n      }\n      const messaging = (this.app as any).messaging() as FirebaseMessaging;\n      const token = await messaging.getToken();\n      if (!token) {\n        return undefined;\n      }\n      return token;\n    } catch (e) {\n      // We don't warn on this, because it usually means messaging isn't set up.\n      // console.warn('Failed to retrieve instance id token.', e);\n\n      // If there's any error when trying to get the token, leave it off.\n      return undefined;\n    }\n  }\n\n  public async getContext(): Promise<Context> {\n    const authToken = await this.getAuthToken();\n    const instanceIdToken = await this.getInstanceIdToken();\n    return { authToken, instanceIdToken };\n  }\n}\n"]}